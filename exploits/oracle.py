# ====== oracle.py (ringkas) ======
import requests, re, json, time
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional, Set

class Verdict(Enum):
    TRUE = 1
    FALSE = 0
    INVALID = -1

@dataclass
class OracleCfg:
    # Aturan fleksibel: pilih yang cocok dengan target
    regex_true: List[str] = field(default_factory=list)     # pola yang muncul saat kondisi TRUE
    regex_false: List[str] = field(default_factory=list)    # pola yang muncul saat kondisi FALSE
    regex_invalid: List[str] = field(default_factory=list)  # pola error/WAF
    css_selector: Optional[str] = None                      # kalau HTML & kamu pakai bs4 (opsional)
    status_invalid: Set[int] = field(default_factory=lambda: {400,401,403,404,409,422,429,500,502,503})
    use_length_delta: bool = True
    baseline_true_len: Optional[int] = None
    baseline_false_len: Optional[int] = None
    length_slack: int = 16
    use_time_based: bool = False
    true_delay_sec: Optional[float] = None  # kalau pakai sleep-based

class ResponseOracle:
    def __init__(self, cfg: OracleCfg):
        self.cfg = cfg

    def _hit(self, pats: List[str], text: str) -> bool:
        return any(re.search(p, text, re.I|re.S) for p in pats)

    def verdict(self, resp: requests.Response, elapsed: Optional[float] = None) -> Verdict:
        body = resp.text or ""
        # 1) status invalid?
        if resp.status_code in self.cfg.status_invalid:
            return Verdict.INVALID
        # 2) regex invalid?
        if self._hit(self.cfg.regex_invalid, body):
            return Verdict.INVALID
        # 3) regex true/false?
        if self._hit(self.cfg.regex_true, body):
            return Verdict.TRUE
        if self._hit(self.cfg.regex_false, body):
            return Verdict.FALSE
        # 4) length delta fallback
        if self.cfg.use_length_delta and self.cfg.baseline_true_len and self.cfg.baseline_false_len:
            L = len(body)
            if abs(L - self.cfg.baseline_true_len) <= self.cfg.length_slack:
                return Verdict.TRUE
            if abs(L - self.cfg.baseline_false_len) <= self.cfg.length_slack:
                return Verdict.FALSE
        # 5) time-based (kalau kamu set)
        if self.cfg.use_time_based and elapsed is not None and self.cfg.true_delay_sec:
            if elapsed >= self.cfg.true_delay_sec:
                return Verdict.TRUE
            return Verdict.FALSE
        # 6) nggak yakin â†’ INVALID
        return Verdict.INVALID
